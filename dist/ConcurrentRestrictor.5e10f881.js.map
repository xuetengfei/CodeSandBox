{"version":3,"sources":["page/ConcurrentRestrictor/index.js"],"names":["api","ayncList","Array","from","map","_","i","fetchData","fetch","then","response","json","catch","err","console","error","index","ret","setRet","count","setCount","poolLimit","array","iteratorFn","executing","item","p","push","e","c","splice","indexOf","length","Promise","race","all","run","asyncPool","log","v","args","idx","JSON","stringify"],"mappings":"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","file":"ConcurrentRestrictor.5e10f881.js","sourceRoot":"..","sourcesContent":["import React, { useState } from 'react';\n\n// 9个请求\nconst api = 'https://httpbin.org/get?id=';\nconst ayncList = Array.from(Array(9)).map((_, i) => `${api}${i + 1}`);\n\nfunction fetchData(api) {\n  return fetch(api)\n    .then(response => response.json())\n    .catch(err => console.error(err));\n}\n\nexport default function index() {\n  const [ret, setRet] = useState(null);\n  const [count, setCount] = useState(0);\n  // asyncPool\n  async function asyncPool(poolLimit, array, iteratorFn) {\n    const ret = [];\n    const executing = [];\n    for (const item of array) {\n      const p = iteratorFn(item);\n      ret.push(p);\n      const e = p.then(_ => {\n        setCount(c => c + 1);\n        executing.splice(executing.indexOf(e), 1);\n      });\n      executing.push(e);\n      if (executing.length >= poolLimit) {\n        await Promise.race(executing);\n      }\n    }\n    return Promise.all(ret);\n  }\n\n  function run() {\n    setCount(0);\n    setRet(null);\n    asyncPool(3, ayncList, fetchData).then(ret => {\n      console.log('ret: ', ret);\n      setRet(ret.map(v => ({ args: v.args })));\n    });\n  }\n\n  return (\n    <div>\n      <h2>concurrency limit</h2>\n      <div className=\"toast toast-success\">\n        Clicking the button below will initiate the request. There were nine requests and the\n        maximum concurrency control was 3. During the request process, the request will always be\n        processed at the maximum number of concurrent times, reducing the request time to the\n        maximum possible extent. Open the console and view Network Waterfall\n      </div>\n      <div className=\"divider\"></div>\n      <div>\n        <button className=\"btn badge\" onClick={run} data-badge={count}>\n          fetch Data\n        </button>\n      </div>\n      <div>\n        <ul>{ret && ret.map((v, idx) => <li key={idx}>{JSON.stringify(v, null, 2)}</li>)}</ul>\n      </div>\n    </div>\n  );\n}\n"]}